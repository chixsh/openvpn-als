*** NOTE ***

Most unit tests don't work yet. In fact the build may fail if they're used. To skip them, use 
-Dmaven.test.skip=true:

mvn -Dmaven.test.skip=true clean install 

==Status of the migration==

Current (28th July 2009) all code has been converted to maven2. The "ant" build is still required after 
building the maverick-classes. This will soon change as maven modules will be modified to produce the
same output as ant does, one module at a time. The ant build will be kept intact at all times. The 
Agent's ant build does some applet signing, which may prove to be difficult to reproduce "the maven
way". Some ant "deploy" script will be necessary for quite a while due to OpenVPN ALS's funky extension
system.

For historic reasons modules have long names and are being converted to shorter names thusly:

 adito-community-applications -> applications
 adito-agent -> agent
 
In some rare cases this affects the Maven src/main/java directory structure. All references in the java, 
xml, property etc. files have to be converted, too. For this reason there is a Bash script 
(tools/convert_variables.sh) that can help in the conversion process.

Changelog:

   1st June 2009:   maverick-* modules converted to maven2
   3rd July 2009:   webapp and some extensions converted (partially) to maven2
   28th July 2009:  the rest of the modules, including those created after the fork
		    (clientcerts,pam,ldap,radius) now converted to maven2
   31st July 2009:  everything except the agent is completely mavenized and namespace change is complete
   3rd August 2009: mavenized version of Adito runs with the exception of agent and networkplaces module

==How the maven2 build works==

You can check the build order from main pom.xml. Because ALS's old extension management system was tied 
to Jetty-specific methods (addResourceBase()) the build is somewhat more complex than that of a typical 
webapp:

- Build general-purpose modules (maverick-*)
- Build the webapp (webapp)
- Build and assemble the extensions (e.g. unix, networkplaces, pam...)
- Build the agent components (agent, agent-awt, agent-swt, ui)
- Assemble the agent (in stub module "agent-assembly") with maven + antrun plugin
- Assemble all of this into a functional webapp directory for deployment (with ant in nonembedded/build.xml)

==Installing and running Adito in "nonembedded"==

First build the modules that have been mavenized:

  cd $ADITO_HOME
  mvn install

Then run ant to build the rest of the modules and create the deployable Adito "bundle":

  cd $ADITO_HOME/adito
  ant install
  mkdir $JETTY_HOME/webapps/adito
  cp -r deploy/* $JETTY_HOME/webapps/adito/

Next you need to create a Jetty virtual host. Add this to $JETTY_HOME/etc/jetty.xml:

 <New class="org.mortbay.jetty.webapp.WebAppContext">
  <Arg><Ref id="Contexts"/></Arg>
  <Arg><SystemProperty name="jetty.home"/>/webapps/adito</Arg>
  <Arg>/</Arg>
  <Set name="defaultsDescriptor"><SystemProperty name="jetty.home" default="."/>/etc/webdefault.xml</Set>
  <Set name="VirtualHosts">
   <Array type="java.lang.String">
    <Item>localhost</Item>
   </Array>
  </Set>
 </New>

Then you can start the Jetty web server:

 cd $JETTY_HOME
 java -jar start.jar

And navigate to ALS login page:

 http://localhost:8080/adito

The default admin username is "root" and password is "root1".

To clean up, do 

  ant clean
  mvn clean

==Runtime dependencies==

There are a few differences between ant's output and maven's output in WEB-INF/lib. 
Many of the libs in ant's output are leftovers from earlier times (=no 
references in source code):

- adito-jcifs.jar
- ehcache-1.0.jar
- commons-codec-1.3.jar
- commons-compress-20040530.jar
- commons-dbcp-1.2.1.jar
- commons-transaction-1.0rc1.jar
- geronimo-jta.jar
- jakarta-oro.jar
- jaxen-core.jar
- jaxen-jdom.jar
- tm-extractors-0.4.jar
- xml-im-exporter1.1.jar

Some are actually missing and there are references to them in source code. But still 
the build does not fail:

- saxpath.jar

A few seem to be extra in maven2 build:

- avalon-framework-4.1.3.jar
- jasper-compiler-4.2.20RC0.jar
- jasper-runtime-5.5.23.jar
- jericho-html-1.5-dev1.jar
- jsp-api-2.1.jar
- jstl-1.0.6.jar
- log4j-1.2.12.jar
- logkit-1.0.1.jar
- nanoxml-2.2.3.jar
- oro-2.0.7.jar
- xalan-2.5.1.jar
- xml-apis-1.0.b2.jar

== Modules not available from public Maven2 repositories ==

There are some jars that Adito requires which are not yet in public Maven repositories. These
modules are currently hosted in a custom Maven2 repository (http://adito.pcdog.ch/maven2).

== Mavenizing the Adito Agent ==

Agent is comprised of several components:

adito-agent
adito-agent-awt
adito-agent-swt
ui

The Agent also needs a SSL-certificate for proper operation. The files required for
the Agent's SSL certificate are these:

agent-keystore.p12
- the certificate container, created with Java keytool (see "Installing Adito..." in Wiki)

certificate.properties
- File that specifies the Agent's keystore password. It's used to sign the Agent Java applet.

There's also a file, "cabpass.exe" which apparently does something on win32 clients. This is most
likely something created by 3sp, as google yields only a few SSL-Explorer -related hits. 

== Misc notes ==

Adito originally contained a patched version of Apache commons vfs. The patches themselves are available
in directory adito-commons-vfs/patches and are _probably_ the only modifications to the original
commons-vfs code. To reduce unnecessary work and confusion Mavenized Adito now uses standard commons-vfs.
