
==Status of the migration==

Current (4th August 2009) the build process has been completely mavenized. Ant is still used
for assembling the Agent but all of this happens behind the hood. On code level everything
expect forwarding requests to Agent works.

Changelog:

   1st June 2009:   maverick-* modules converted to maven2
   3rd July 2009:   webapp and some extensions converted (partially) to maven2
   28th July 2009:  the rest of the modules, including those created after the fork
		    (clientcerts,pam,ldap,radius) now converted to maven2
   31st July 2009:  everything except the agent is completely mavenized and namespace change is complete
   3rd August 2009: mavenized version of Adito runs with the exception of agent and networkplaces module
   4th August 2009: all modules mavenized and a deploy script available

==How the maven2 build works==

You can check the build order from main pom.xml. Because ALS's old extension management system was tied 
to Jetty-specific methods (addResourceBase()) the build is somewhat more complex than that of a typical 
webapp:

- Build general-purpose modules (maverick-*)
- Build the webapp (webapp)
- Build and assemble the extensions (e.g. unix, networkplaces, pam...)
- Build the agent components (agent, agent-awt, agent-swt, ui)
- Assemble the agent (in stub module "agent-assembly") with maven + antrun plugin
- Assemble all of this into a functional webapp directory for deployment (with "ant deploy"
  in $ADITO_HOME/build.xml)

==Installing and running Adito in "nonembedded"==

NOTE: most unit tests don't work yet. In fact the build fails if they're used. If you follow these
instructions closely, you'll be just fine.

For the build to work you need the following:

* JDK 1.5+ (e.g. from Sun)
* Maven2 (http://maven.apache.org)
* Ant (http://ant.apache.org)

First build the modules that have been mavenized:

  cd $ADITO_HOME
  mvn -Dmaven.test.skip=true clean install 

After this you must create a deployable version of ALS with

  ant deploy

To deploy ALS on Jetty (6.1.x):

  cd $ADITO_HOME/target
  cp -r adito $JETTY_HOME/webapps/

Next you need to create a Jetty virtual host. Add this to $JETTY_HOME/etc/jetty.xml:

 <New class="org.mortbay.jetty.webapp.WebAppContext">
  <Arg><Ref id="Contexts"/></Arg>
  <Arg><SystemProperty name="jetty.home"/>/webapps/adito</Arg>
  <Arg>/</Arg>
  <Set name="defaultsDescriptor"><SystemProperty name="jetty.home" default="."/>/etc/webdefault.xml</Set>
  <Set name="VirtualHosts">
   <Array type="java.lang.String">
    <Item>localhost</Item>
   </Array>
  </Set>
 </New>

Then you can start the Jetty web server:

 cd $JETTY_HOME
 java -jar start.jar

And navigate to ALS login page:

 http://localhost:8080/adito

The default admin username is "admin" and password is "admin123".

To clean up, do 

  mvn clean


==Differences between "nonembedded" and old (3sp-style) "trunk"==

===Architectural changes===

The original (3sp) code was built around embedded components, foremost
the outdated embedded Jetty web server / servlet container (5.x).
Several code-level ties to the embedded Jetty made updating,
maintaining and deploying the software overly difficult. The embedded
HSQLDB database made non-standard deployment scenarios (e.g.
load-balancing) very hard. The matters were made worse by a really
complex build system based on Apache Ant, which was also used for
launching the application with or without the Java service wrapper.
The wrapper was a constant source of problems, probably mostly due it's
the shaky integration with "ant". 3sp solved the deployment issue by
creating neat installers that hid the complexities deployment from the
user. They had solid reasons for making SSL-Explorer (later Adito /
OpenVPN ALS) a tightly integrated package, but none of these reasons
apply for a community-based open source project. Ease of deployment and
development are much higher priority now.

This first version of OpenVPN ALS is considerably different from
SSL-Explorer in many regards. The code is now runnable on an external
servlet container or application server, even though only Jetty 6.1.x
has been tested. All code-level ties to embedded Jetty have been removed.
The embedded HSQLDB database is still there, but it will soon be
replaced with an external one. The build system has been overhauled
completely with the complete migration to Maven2. This makes installing,
developing, updating and packaging ALS _much_ easier than previously.
Java service wrapper has been removed, but it's of course possible to
use it by configuring it manually.

Support for various obsolete stuff (e.g. MS JVM 1.1) has been removed
from the build process. Especially the Agent has been simplified -
see "agent-assembly/build.xml". SSL-Explorer/Adito originally contained
a patched version of Apache Commons VFS. The patches themselves are
available in $OLDTRUNK/adito-commons-vfs/patches and are _probably_ the
only modifications to the original commons-vfs code. To reduce unnecessary
work and confusion Mavenized Adito now uses standard commons-vfs. To be
exact, this change was made earlier in "trunk" and pushed to "nonembedded"
later.

For historic reasons modules had long names and they have been converted
to shorter names thusly:

 adito-community-applications -> applications
 adito-agent -> agent
 
In some rare cases this affects the Maven src/main/java directory tree.

===Runtime dependencies===

There are a few differences between ant's output and maven's output in WEB-INF/lib. 
Many of the libs in ant's output are leftovers from earlier times (=no 
references in source code):

- adito-jcifs.jar
- ehcache-1.0.jar
- commons-codec-1.3.jar
- commons-compress-20040530.jar
- commons-dbcp-1.2.1.jar
- commons-transaction-1.0rc1.jar
- geronimo-jta.jar
- jakarta-oro.jar
- jaxen-core.jar
- jaxen-jdom.jar
- tm-extractors-0.4.jar
- xml-im-exporter1.1.jar

Some are actually missing and there are references to them in source code. But still 
the build does not fail:

- saxpath.jar

A few seem to be extra in maven2 build:

- avalon-framework-4.1.3.jar
- jasper-compiler-4.2.20RC0.jar
- jasper-runtime-5.5.23.jar
- jericho-html-1.5-dev1.jar
- jsp-api-2.1.jar
- jstl-1.0.6.jar
- log4j-1.2.12.jar
- logkit-1.0.1.jar
- nanoxml-2.2.3.jar
- oro-2.0.7.jar
- xalan-2.5.1.jar
- xml-apis-1.0.b2.jar

==Modules not available from public Maven2 repositories==

There are some jars that Adito requires which are not yet in public Maven repositories. These
modules are currently hosted in a custom Maven2 repository (http://adito.pcdog.ch/maven2).

