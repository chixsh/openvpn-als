*** NOTE ***

Most unit tests don't work yet. In fact the build may fail if they're used. To skip them, use 
-Dmaven.test.skip=true:

mvn -Dmaven.test.skip=true clean install 

==Status of the migration==

Current (28th July 2009) all code has been converted to maven2. The "ant" build is still required after 
building the maverick-classes. This will soon change as maven modules will be modified to produce the
same output as ant does, one module at a time. The ant build will be kept intact at all times. The 
Agent's ant build does some applet signing, which may prove to be difficult to reproduce "the maven
way". Some ant "deploy" script will be necessary for quite a while due to OpenVPN ALS's funky extension
system.

Changelog:

   1st June 2009:  maverick-* modules converted to maven2
   3rd July 2009:  webapp and some extensions converted (partially) to maven2
   28th July 2009: the rest of the modules, including those created after the fork
		   (clientcerts,pam,ldap,radius) now converted to maven2

==Installing and running Adito in "nonembedded"==

First build the modules that have been mavenized:

  cd $ADITO_HOME
  mvn install

Then run ant to build the rest of the modules and create the deployable Adito "bundle":

  cd $ADITO_HOME/adito
  ant install
  cp -r deploy/* $JETTY_HOME/webapps/adito/

Next you need to create a Jetty virtual host. For instructions, take a look here:

* https://sourceforge.net/pm/task.php?func=detailtask&project_task_id=153892&group_id=228294&group_project_id=57945


To clean up, do 

  ant clean
  mvn clean

== Modules not available from public Maven2 repositories ==

There are some jars that Adito requires which are not yet in public Maven repositories. These
modules are currently hosted in a custom Maven2 repository (http://adito.pcdog.ch/maven2).

== New module names ==

For historic reasons modules have long names and are being converted to shorter names thusly:

 adito-community-applications -> applications
 adito-agent -> agent
 
In some rare cases this affects the Maven src/main/java directory structure. All references in the java, 
xml, property etc. files have to be converted, too. For this reason there is a Bash script 
(tools/convert_variables.sh) that can help in the conversion process.

== Basic techniques ==

You can use the jar's and zip-files in the "comparison" directory to see if output Maven creates is 
correct. The directory contains fully functional JAR's and ZIP-files created by the original "ant" build 
process.

To peek inside a JAR, you can use

 jar tf filename.jar

For ZIP-files you can (on Linux) use

 zipinfo filename.zip

If contents of the Ant/Maven JAR/ZIP differs a lot, you've probably got a problem. Note that we probably
have to use the Assembly plugin to create a fully functional, runnable version of Adito. Another option
is to call "ant" to build the actual extension ZIP-file.

== Mavenizing the Adito Agent ==

Agent is comprised of several components:

adito-agent
adito-agent-awt
adito-agent-swt
ui

The Agent also needs a SSL-certificate for proper operation. The files required for
the Agent's SSL certificate are these:

agent-keystore.p12
- the certificate container, created with Java keytool (see "Installing Adito..." in Wiki)

certificate.properties
- File that specifies the Agent's keystore password. It's used to sign the Agent Java applet.

There's also a file, "cabpass.exe" which apparently does something on win32 clients. This is most
likely something created by 3sp, as google yields only a few SSL-Explorer -related hits. 

== Misc notes ==

Adito originally contained a patched version of Apache commons vfs. The patches themselves are available
in directory adito-commons-vfs/patches and are _probably_ the only modifications to the original
commons-vfs code. To reduce unnecessary work and confusion Mavenized Adito now uses standard commons-vfs.
